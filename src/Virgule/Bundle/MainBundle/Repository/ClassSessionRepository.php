<?php

namespace Virgule\Bundle\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * ClassSessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClassSessionRepository extends EntityRepository {
    
    private function getDefaultQueryBuilder() {
        return $this->createQueryBuilder('c');
    }
   
    private function getBasicQueryBuilder() {
        
    }
    public function loadAllClassSessionByTeacher($semesterId, $teacherId, $limit = null) {
        $qb = $this->getDefaultQueryBuilder()
            ->addSelect('c.id, c.reportDate, c.sessionDate, count(cm.id) as nb_comments')
            ->addSelect('cl.label as classLevelLabel, cl.htmlColorCode as classLevelHtmlColorCode')
            ->innerJoin('c.sessionTeacher', 't')
            ->innerJoin('c.course', 'c2')
            ->innerJoin('c2.semester', 's')
            ->innerJoin('c2.classLevel', 'cl')
            ->leftJoin('c.comments', 'cm')
            ->where('t.id = :teacherId')             
            ->andWhere('s.id = :semesterId')
            ->setParameter('teacherId', $teacherId)
            ->setParameter('semesterId', $semesterId)
            ->add('orderBy', 'c.sessionDate DESC')
            ->add('groupBy', 'c.id')
        ;
        
        if ($limit != null) {
            $qb->setMaxResults($limit);
        }
        
        $q = $qb->getQuery();
                
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $results;   
    }
    
    public function loadAllClassSessionByClassLevel($classLevelId, $semesterId) {
        $qb = $this->getDefaultQueryBuilder()
            ->addSelect('c.id, c.reportDate, c.sessionDate, count(cm.id) as nb_comments')
            ->innerJoin('c.course', 'c2')
            ->innerJoin('c2.classLevel', 'cl', 'WITH', 'cl.id = :classLevelId')
            ->innerJoin('c.sessionTeacher', 't')
            ->innerJoin('c2.semester', 's', 'WITH', 'c2.id = :semesterId')
            ->leftJoin('c.comments', 'cm')
            ->setParameter('classLevelId', $classLevelId)
            ->setParameter('semesterId', $semesterId)
            ->add('orderBy', 'c.reportDate DESC')
            ->add('groupBy', 'c.id')
        ;
        
        $q = $qb->getQuery();
                
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $results;   
    }    
    
    public function loadAllClassSessionByCourse($courseId, $limit = null) {
        $qb = $this->getDefaultQueryBuilder()
            ->addSelect('c.id, c.reportDate, c.sessionDate, count(cm.id) as nb_comments')
            ->innerJoin('c.course', 'c2')
            ->innerJoin('c.sessionTeacher', 't')
            ->leftJoin('c.comments', 'cm')
            ->where('c2.id = :courseId')
            ->setParameter('courseId', $courseId)
            ->add('orderBy', 'c.reportDate DESC')
            ->add('groupBy', 'c.id')
        ;
        
        if ($limit != null) {
            $qb->setMaxResults($limit);
        }
        
        $q = $qb->getQuery();
                
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $results;   
    }    
    
    public function loadAll($semesterId, $limit = null) {
        $qb = $this->getDefaultQueryBuilder()
            ->addSelect('c.id as id, c.reportDate, c.sessionDate, c.summary as summary')
            ->addSelect('c2.id as course_id, c2.dayOfWeek as course_dayOfWeek,
                c2.startTime as course_startTime, c2.endTime as course_endTime')
            ->addSelect('t1.id as sessionTeacher_id, t1.firstName as sessionTeacher_firstName, t1.lastName as sessionTeacher_lastName')
            ->addSelect('t2.id as reportTeacher_id, t2.firstName as reportTeacher_firstName, t2.lastName as reportTeacher_lastName')
            ->addSelect('cl.label as classLevelLabel, cl.htmlColorCode as classLevelHtmlColorCode')
            ->addSelect('count(st.id) as nb_students')
            ->innerJoin('c.course', 'c2')
            ->innerJoin('c2.classLevel', 'cl')
            ->innerJoin('c2.semester', 's')
            ->innerJoin('c.sessionTeacher', 't1')
            ->innerJoin('c.reportTeacher', 't2')
            ->leftJoin('c.classSessionStudents', 'st')
            ->where('s.id = :semesterId')
            ->add('orderBy', 'c.reportDate DESC')
            ->add('groupBy', 'c.id')
            ->setParameter('semesterId', $semesterId);
        
            if ($limit != null) {
                $qb->setMaxResults($limit);
            }
        
         $q = $qb->getQuery()
        ;
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $results;  
    }
    
    public function loadAllForMiniList($semesterId, $limit = null) {
        $qb = $this->getDefaultQueryBuilder()
            ->addSelect('c.id as id, c.reportDate, c.sessionDate')
            ->addSelect('count(cm.id) as nb_comments')
            ->addSelect('cl.label as classLevelLabel, cl.htmlColorCode as classLevelHtmlColorCode')
            ->innerJoin('c.course', 'c2')
            ->innerJoin('c2.classLevel', 'cl')
            ->innerJoin('c2.semester', 's')
            ->leftJoin('c.comments', 'cm')
            ->where('s.id = :semesterId')
            ->add('orderBy', 'c.reportDate DESC')
            ->add('groupBy', 'c.id')
            ->setParameter('semesterId', $semesterId);
        
            if ($limit != null) {
                $qb->setMaxResults($limit);
            }
        
         $q = $qb->getQuery()
        ;
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $results;  
    }
}
