<?php

namespace Virgule\Bundle\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * ClassLevel
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourseRepository extends EntityRepository {

    /**
     * Count number of courses that overlap
     * $another_meeting = ($from >= $from_compare && $from <= $to_compare) || ($from_compare >= $from && $from_compare <= $to);
     * @param type $semesterId
     * @param type $dayOfWeek
     * @param type $classRoomId
     * @param type $startTime
     * @param type $endTime
     * @return type Integer
     */
    public function getNumberOfOverlapingCourses($semesterId, $dayOfWeek, $classRoomId, $startTime, $endTime) {
        $q = $this
                ->createQueryBuilder('c')
                ->where('c.semester.id = :semesterId')
                ->andWhere('c.dayOfWeek = :dayOfWeek')
                ->andWhere('c.fkClassRoomId = :classRoomId')
                ->andWhere('(c.startTime > :startTime AND c.startTime < :endTime) OR (:startTime > c.startTime AND :startTime < c.endTime)')
                ->setParameter('semesterId', $semesterId)
                ->setParameter('dayOfWeek', $dayOfWeek)
                ->setParameter('classRoomId', $classRoomId)
                ->setParameter('startTime', $startTime)
                ->setParameter('endTime', $endTime)
                ->getQuery()
        ;
        $nb = $q->execute();
        return $nb;
    }

    public function getCoursesByTeacher($semesterId, $teacherId) {
        $q = $this
                ->createQueryBuilder('c')
                ->innerJoin('c.teachers', 't')
                ->innerJoin('c.semester', 's')
                ->where('s.id = :semesterId')
                ->andWhere('t.id = :teacherId')
                ->add('orderBy', 'c.dayOfWeek ASC, c.startTime ASC')
                ->setParameter('teacherId', $teacherId)
                ->setParameter('semesterId', $semesterId)
                ->getQuery()
        ;
        $nb = $q->execute();
        return $nb;
    }

    public function loadAll($semesterId) {
        $q = $this
            ->createQueryBuilder('c')
            ->addSelect('c.id as course_id, c.dayOfWeek, c.startTime, c.endTime, c.alternateStartdate, c.alternateEnddate')
            ->addSelect('r.name as classroom, c2.label as classlevel')
            ->addSelect('t.id as teacher_id, t.lastName as teacher_lastName, t.firstName as teacher_firstName')
            ->innerJoin('c.teachers', 't')
            ->innerJoin('c.classLevel', 'c2')
            ->innerJoin('c.classRoom', 'r')
            ->innerJoin('c.semester', 's')
            ->where('s.id = :semesterId')
            ->add('orderBy', 'c.dayOfWeek ASC, c.startTime ASC')
            ->setParameter('semesterId', $semesterId)
            ->getQuery()
        ;
        $results = $q->execute(array(), Query::HYDRATE_ARRAY);
        
        return $results;   
    }
}
