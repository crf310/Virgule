<?php

namespace Virgule\Bundle\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * StudentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentRepository extends EntityRepository {
    
    /**
     * Select all students enrolled in a class of the selected semester
     * @return type
     */
    public function loadAll($semesterId) {
        $q = $this
            ->createQueryBuilder('s')
            ->addSelect('s.id, s.firstname, s.lastname, s.gender, s.phoneNumber, s.cellphoneNumber, s.registrationDate, t.id as teacher_id, t.firstName as teacher_firstName, t.lastName as teacher_lastName')
            ->addSelect('c.isoCode, c.label')
            ->innerJoin('s.nativeCountry', 'c')
            ->innerJoin('s.courses', 'c2')
            ->leftJoin('s.welcomedByTeacher', 't')
            ->where('c2.semester = :semesterId')
            ->add('orderBy', 's.lastname ASC')
            ->setParameter('semesterId', $semesterId)
            ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;   
    }
    
    public function loadAllEnrolledInCourses(Array $courseIds) {
        $ids = implode(',',$courseIds);
        $q = $this
            ->createQueryBuilder('s')
            ->addSelect('s.id, s.firstname, s.lastname, s.gender, s.phoneNumber, s.cellphoneNumber')
            ->addSelect('c.isoCode, c.label')
            ->innerJoin('s.nativeCountry', 'c')
            ->innerJoin('s.courses', 'c2')
            ->where('c2.id IN (:coursesIds)')
            ->add('orderBy', 's.lastname ASC')
            ->setParameter('coursesIds', $ids)
            ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;   
    }
    
    /**
     * 
     * @param array $courseIds
     * @return type
     */
    public function loadAllEnrolledInCourse($courseId) {
        $q = $this
            ->createQueryBuilder('s')
            ->addSelect('s.id as student_id, s.firstname as student_firstname, s.lastname as student_lastname, s.gender as student_gender')
            ->innerJoin('s.courses', 'c2')
            ->where('c2.id == :courseId')
            ->add('orderBy', 's.lastname ASC')
            ->setParameter('courseId', $courseId)
            ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;   
    }
}
