<?php

namespace Virgule\Bundle\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * StudentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentRepository extends EntityRepository {

    private function createDefaultQueryBuilder() {
        return $this->createQueryBuilder('s');
    }
    /**
     * Select all students enrolled in a class of the selected semester
     * @return type
     */
    public function loadAll($semesterId) {
        $q = $this->createDefaultQueryBuilder()
                ->addSelect('s.id, s.firstname, s.lastname, s.gender, s.phoneNumber, s.cellphoneNumber, s.registrationDate, t.id as teacher_id, t.firstName as teacher_firstName, t.lastName as teacher_lastName')
                ->addSelect('c2.id as course_id, l.label as level')
                ->addSelect('c.isoCode, c.label')
                ->innerJoin('s.nativeCountry', 'c')
                ->innerJoin('s.courses', 'c2')
                ->innerJoin('c2.classLevel', 'l')
                ->leftJoin('s.welcomedByTeacher', 't')
                ->where('c2.semester = :semesterId')
                ->add('orderBy', 's.lastname ASC, s.firstname ASC')
                ->setParameter('semesterId', $semesterId)
                ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;
    }

    public function getQueryBuilderForStudentEnrolledInCourses(Array $courseIds) {
        $ids = implode(',', $courseIds);
        $q = $this
                ->createDefaultQueryBuilder()
                ->innerJoin('s.nativeCountry', 'c')
                ->innerJoin('s.courses', 'c2', 'WITH', 'c2.id IN (:coursesIds)')
                ->leftJoin('s.comments', 'cm')
                ->add('orderBy', 's.lastname ASC, s.firstname ASC')
                ->add('groupBy', 's.id')
                ->setParameter('coursesIds', $ids)
        ;
        return $q;
    }

    public function loadAllEnrolledInCourses(Array $courseIds) {
        $q = $this->getQueryBuilderForStudentEnrolledInCourses($courseIds)
                ->addSelect('s.id, s.firstname as firstname, s.lastname as lastname, s.gender as gender, s.phoneNumber as phoneNumber, s.cellphoneNumber, count(cm.id) as nb_comments')
                ->addSelect('c.isoCode, c.label');
        return $q->getQuery()->execute(array(), Query::HYDRATE_ARRAY);
    }

    /**
     * 
     * @param array $courseIds
     * @return type
     */
    public function loadAllEnrolledInCourse($courseId) {
        return $this->loadAllEnrolledInCourses(Array($courseId));
    }

    public function getGenders($semesterId) {
        $q = $this
                ->createDefaultQueryBuilder()
                ->addSelect('s.gender, count(s.gender) as nb_students')
                ->innerJoin('s.courses', 'c2')
                ->where('c2.semester = :semesterId')
                ->groupBy('s.gender')
                ->setParameter('semesterId', $semesterId)
                ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;
    }

    public function getAges($semesterId) {
        $q = $this
                ->createDefaultQueryBuilder()
                ->select('s.id, count(s.gender) as nb_students')
                ->innerJoin('s.courses', 'c2')
                ->where('c2.semester = :semesterId')
                ->groupBy(' s.gender')
                ->distinct()
                ->setParameter('semesterId', $semesterId)
                ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;
    }

    public function getCountries($semesterId) {
        $q = $this
                ->createDefaultQueryBuilder()
                ->select('s.')
                ->addSelect('c1.isoCode as isoCode, c1.label as label, count(s.id) as nb_students')
                ->innerJoin('s.nativeCountry', 'c1')
                ->innerJoin('s.courses', 'c2')
                ->where('c2.semester = :semesterId')
                ->groupBy('isoCode')
                ->distinct()
                ->setParameter('semesterId', $semesterId)
                ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;
    }
    
    public function getStudentsInformation($semesterId) {
        $q = $this
                ->createDefaultQueryBuilder()
                ->addSelect('s.id as student_id, s.gender as student_gender')
                ->addSelect('c1.isoCode as country_code, c1.label as country_label')
                ->innerJoin('s.nativeCountry', 'c1')
                ->innerJoin('s.courses', 'c2')
                ->where('c2.semester = :semesterId')
                ->setParameter('semesterId', $semesterId)
                ->distinct()
                ->getQuery()
        ;
        $students = $q->execute(array(), Query::HYDRATE_ARRAY);
        return $students;
    }
}