<?php

namespace Virgule\Bundle\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TeacherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeacherRepository extends EntityRepository {

  /**
   * @return \Doctrine\ORM\QueryBuilder
   */
  public function createDefaultQueryBuilder() {
    return $this->createQueryBuilder('t');
  }

  /**
   * Returns a query builder to select all teachers
   * registered with the provided organization branch
   * @param type $organizationBranchId
   */
  public function getTeachers($organizationBranchId) {
    return $this->createDefaultQueryBuilder()
            ->andWhere('t.username <> :rootUsername')
            ->innerJoin('t.organizationBranches', 'ob', 'WITH', 'ob.id = :organizationBranchId')
            ->add('orderBy', 't.lastName ASC, t.firstName ASC')
            ->setParameter('organizationBranchId', $organizationBranchId)
            ->setParameter('rootUsername', "root");
  }

  public function getAvailableTeachersQueryBuilder($organizationBranchId, $isActive = true) {
    $q = $this->createDefaultQueryBuilder()
            ->where('t.isActive = :isActive')
            ->andWhere('t.username <> :rootUsername')
            ->innerJoin('t.organizationBranches', 'ob', 'WITH', 'ob.id = :organizationBranchId')
            ->add('orderBy', 't.lastName ASC, t.firstName ASC')
            ->setParameter('organizationBranchId', $organizationBranchId)
            ->setParameter('isActive', $isActive)
            ->setParameter('rootUsername', "root");
    return $q;
  }

  public function getTeachersByStatus($organizationBranchId, $isActive = true) {
    $q = $this->createDefaultQueryBuilder()
            ->where('t.isActive = :isActive')
            ->andWhere('t.username <> :rootUsername')
            ->innerJoin('t.organizationBranches', 'ob', 'WITH', 'ob.id = :organizationBranchId')
            ->add('orderBy', 't.lastName ASC, t.firstName ASC')
            ->setParameter('organizationBranchId', $organizationBranchId)
            ->setParameter('isActive', $isActive)
            ->setParameter('rootUsername', "root")
            ->getQuery()
    ;
    $teachers = $q->execute();
    return $teachers;
  }

  public function getNbTeachersByStatus($organizationBranchId, $isActive = true) {
    $q = $this->createDefaultQueryBuilder()
            ->addSelect('count(t.id) as nb_teachers')
            ->where('t.isActive = :isActive')
            ->andWhere('t.username <> :rootUsername')
            ->innerJoin('t.organizationBranches', 'ob', 'WITH', 'ob.id = :organizationBranchId')
            ->setParameter('organizationBranchId', $organizationBranchId)
            ->setParameter('isActive', $isActive)
            ->setParameter('rootUsername', "root")
            ->getQuery()
    ;
    $teachers = $q->getSingleResult();
    return $teachers;
  }

}
